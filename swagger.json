{
  "swagger": "2.0",
  "info": {
    "description": "This is the task API.",
    "version": "1.0.0",
    "title": "User Tasks API",
    "termsOfService": "http://jamesno.com/terms/",
    "contact": {
      "email": "james.no@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "taskapi.jamesno.com",
  "basePath": "/v2",
  "tags": [
    {
      "name": "users",
      "description": "User operations"
    },
    {
      "name": "tasks",
      "description": "Task operations"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Adds a new user",
        "description": "Add a user object",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "newUser",
            "in": "body",
            "description": "User object that needs to be added",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/user"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "User is already defined"
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Finds all users",
        "description": "Returns all usernames",
        "operationId": "findUsersByUsername",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "getAllUsers",
            "in": "query",
            "description": "username to search for",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          },
          "404": {
            "description": "Username not found"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find User by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates an existing user",
        "description": "Changes data for existing user",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userUpdate",
            "in": "body",
            "description": "User firstname that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user successfully"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes user",
        "description": "Removes user object with ID as parameter",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user to delete by userID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted"
          },
          "400": {
            "description": "Invalid ID"
          },
          "404": {
            "description": "Cannot find userID"
          }
        }
      }
    },
    "/users/{userId}/tasks": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Adds a new task to user",
        "description": "Add a user object",
        "operationId": "addTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tasks",
            "in": "body",
            "description": "Task object to be added",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added task"
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Task is already defined"
          }
        }
      },
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Look up all tasks of user",
        "description": "find user's tasks",
        "operationId": "taskSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskName",
            "in": "query",
            "description": "task to find",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "400": {
            "description": "bad input"
          },
          "404": {
            "description": "task not found"
          }
        }
      }
    },
    "/users/{userId}/tasks/{taskId}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Find task by taskID",
        "description": "Returns task object",
        "operationId": "findTaskId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task",
            "type": "integer",
            "required": true,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "task found",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "Invalid taskID"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update user task",
        "description": "Updates an existing task",
        "operationId": "updateTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "ID of task",
            "type": "integer",
            "required": true,
            "format": "int64"
          },
          {
            "name": "updateTask",
            "in": "body",
            "description": "task to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "task updated"
          },
          "400": {
            "description": "invalid taskID"
          },
          "404": {
            "description": "task ID not found"
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete user task",
        "description": "delete task assigned to user",
        "operationId": "deleteTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "task ID to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted"
          },
          "400": {
            "description": "invalid taskID"
          },
          "404": {
            "description": "Cannot find taskID"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "userID",
        "username"
      ],
      "properties": {
        "userID": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "task": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      }
    },
    "Task": {
      "type": "object",
      "required": [
        "taskID",
        "title",
        "status"
      ],
      "properties": {
        "taskID": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "creationDate": {
          "type": "string"
        },
        "dueDate": {
          "type": "string"
        },
        "completionDate": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "task maturity state",
          "enum": [
            "New",
            "In Progress",
            "Blocked",
            "Completed"
          ]
        }
      }
    }
  }
}